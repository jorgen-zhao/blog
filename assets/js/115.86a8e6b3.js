(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{461:function(e,t,i){"use strict";i.r(t);var a=i(14),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"stack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[e._v("#")]),e._v(" stack")]),e._v(" "),t("p",[e._v("FILO")]),e._v(" "),t("p",[e._v("push peek/ pop")]),e._v(" "),t("p",[e._v("uses of stacks")]),e._v(" "),t("ol",[t("li",[e._v("unde/redo features in text editors")]),e._v(" "),t("li",[e._v("moving back/forward though brower history")]),e._v(" "),t("li",[e._v("backtracking algorithms(maze file directories)")]),e._v(" "),t("li",[e._v("calling functions(call stack)")])]),e._v(" "),t("h2",{attrs:{id:"queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[e._v("#")]),e._v(" Queue")]),e._v(" "),t("p",[e._v("FIFO")]),e._v(" "),t("p",[e._v("add enqueue offer / remove dequeue poll")]),e._v(" "),t("ol",[t("li",[e._v("keyboard buffer(letters should appear on the screen in the order theyâ€™re pressed)")]),e._v(" "),t("li",[e._v("printer queue (print jobs should be completed in order)")]),e._v(" "),t("li",[e._v("used in LinkedLists, priorityQueues, Breath-first search")])]),e._v(" "),t("h3",{attrs:{id:"priorityqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue"}},[e._v("#")]),e._v(" PriorityQueue")]),e._v(" "),t("p",[e._v("a FIFO data structure that serves element with the highest priorities first before elements with lower priority")]),e._v(" "),t("h3",{attrs:{id:"linked-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[e._v("#")]),e._v(" Linked List")]),e._v(" "),t("ul",[t("li",[e._v("Single linked list")]),e._v(" "),t("li",[e._v("doule linked list")])]),e._v(" "),t("p",[e._v("Advantage")]),e._v(" "),t("ul",[t("li",[e._v("Dynamic data structure (allocates needed memory while running)")]),e._v(" "),t("li",[e._v("Insertion and deletion of nodes is easyO(1)")]),e._v(" "),t("li",[e._v("NO/Low memory Waste")])]),e._v(" "),t("p",[e._v("Disadvantage")]),e._v(" "),t("ul",[t("li",[e._v("Greater memory usage(additional pointer)")]),e._v(" "),t("li",[e._v("No random access of elements (no index [i])")]),e._v(" "),t("li",[e._v("Accessing searching elements is more time consuming O(n)")])]),e._v(" "),t("p",[e._v("uses")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("implements stack/queue")])]),e._v(" "),t("li",[t("p",[e._v("GPS navigation")])]),e._v(" "),t("li",[t("p",[e._v("music playlist")])])]),e._v(" "),t("h3",{attrs:{id:"array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[e._v("#")]),e._v(" Array")]),e._v(" "),t("p",[e._v("static / dynamic")]),e._v(" "),t("p",[e._v("Advantage")]),e._v(" "),t("ul",[t("li",[e._v("random access of elements O(1)")]),e._v(" "),t("li",[e._v("Good locality of reference and data cache utilization")]),e._v(" "),t("li",[e._v("Easy to insert/delete at the end")])]),e._v(" "),t("p",[e._v("Disadvantage")]),e._v(" "),t("ul",[t("li",[e._v("wastes more memory")]),e._v(" "),t("li",[e._v("shifting elements is time consuming O(n)")]),e._v(" "),t("li",[e._v("Expanding/Shrinking the array is time consumingO(n)")])])])}),[],!1,null,null,null);t.default=s.exports}}]);